{"name":"Eircode-js","tagline":"An unofficial JavaScript library for working with Eircodes (Irish postcodes)","body":"# EircodeJS\r\n\r\nEircodeJS is a JavaScript library for parsing and validating [Eircodes](http://eircode.ie/) (Irish postcodes).\r\n\r\nEircodeJS has the following goals:\r\n\r\n<dl>\r\n  <dt>Correctness</dt>\r\n  <dd>EircodeJS will never reject a valid Eircode and should never accept invalid Eircodes</dd>\r\n\r\n  <dt>Usefulness</dt>\r\n  <dd>EircodeJS will emit detailed error messages for the user and for the developer</dd>\r\n\r\n  <dt>Performance</dt>\r\n  <dd>EircodeJS will be fast and have no pathologically slow edge cases</dd>\r\n</dl>\r\n\r\n## Methods\r\n\r\nUsing the static `Eircode.parse` method we can parse some input:\r\n\r\n```javascript\r\nvar EircodeJS = require('eircode-js');\r\nvar result = EircodeJS.parse('A65R2GF');\r\n```\r\n\r\nThis will return a [ParseResult](src/parse-result.js) object.\r\n\r\nWith `ParseResult` you can check if the Eircode is valid and access its parts:\r\n\r\n```javascript\r\nif (result.hasEircode()) {\r\n    console.log('Routing Key = ', result.routingKey());\r\n    console.log('Unique Identifier = ', result.uniqueIdentifier());\r\n}\r\n```\r\n\r\nYou can get a plain object containing all the parsed properties using `toJSON`:\r\n\r\n```javascript\r\nconsole.log(result.toJSON());\r\n```\r\n\r\nThis will output something like:\r\n\r\n```javascript\r\n{\r\n    hasEircode: true,\r\n    eircode: 'A65R2GF',\r\n    hasRoutingKey: true,\r\n    routingKey: 'A65',\r\n    hasUniqueIdentifier: true,\r\n    uniqueIdentifier: 'R2GF',\r\n    error: null,\r\n    logs: []\r\n}\r\n```\r\n\r\nThe properties on the object (and the matching methods on `ParseResult`) are:\r\n\r\n| Name | Type | Description |\r\n| ---  | ---  | ----------- |\r\n| `hasEircode` | bool | Whether the input was a complete and valid Eircode. |\r\n| `eircode` | string | The complete Eircode in **canonical form** if `hasEircode` is true. An empty string otherwise. |\r\n| `hasRoutingKey` | bool | Whether the input had a valid Routing Key. |\r\n| `routingKey` | string | The Routing Key in **canonical form** if `hasRoutingKey` is true. An empty string otherwise. |\r\n| `hasUniqueIdentifier` | bool | Whether the input had a valid Unique Identifier. Will be true iff `hasEircode` is true. |\r\n| `uniqueIdentifier` | string | The Unique Identifier in **canonical form** if `hasUniqueIdentifier` is true. An empty string otherwise. |\r\n| `error` | object / null | If the Eircode could not be parsed then an object containing the error details. null otherwise. |\r\n\r\nAn example `error` object is the following:\r\n\r\n```javascript\r\n{\r\n    message: \"Unique Identifier cannot contain \\\"!\\\"\",\r\n    inputPos: 5,\r\n    outputPos: 4\r\n}\r\n```\r\n\r\nIn this example `inputPos` differs from `outputPos` because a whitespace character in the input was skipped over.\r\n\r\nThe error object contains the following properties:\r\n\r\n| Name | Type | Description |\r\n| ---  | ---  | ----------- |\r\n| `message` | string | A human readable message describing the error. |\r\n| `inputPos` | int | The position in the input string where the error occurred. Or -1 if there is no applicable position. `inputPos` will equal the length of the input string if more input was expected. |\r\n| `outputPos` | int | The position in the output string (the canonical form) where the error occurred. Or -1 if there is no applicable position. Will never be greater than six. |\r\n\r\n## Eircode Specification\r\n\r\nI have compiled the following unofficial Eircode specification based on the information that's been released to date (see [References](#References)).\r\n\r\nAn example of a valid Eircode is:\r\n\r\n- `A65R2GF`\r\n\r\nIn this example:\r\n\r\n- `A65` is the Routing Key\r\n- `R2GF` is the Unique Identifier\r\n\r\nThe Routing Key:\r\n\r\n- Begins with a letter\r\n- Followed by two numbers\r\n\r\nThe only exception is 'D6W' which is a valid Routing Key.\r\n\r\nThe Unique Identifier:\r\n\r\n- Contains four safe characters\r\n\r\nA safe character is either a safe letter or a safe number.\r\n\r\nA safe letter is an alphabetic character, excluding:\r\n\r\n- `O` and `I`\r\n- `M` and `N`\r\n\r\nA safe number is a numeric digit, excluding:\r\n\r\n- `0` and `1`\r\n\r\n## Terminology\r\n\r\nA **valid** Eircode, Routing Key or Unique Identifier follows the patterns laid out in the specification.\r\nNote that a valid Eircode may be unused in real life, may have been discontinued, may map to a geographic area\r\nwithout any dwellings, etc. Checking if an Eircode is deliverable is different to checking if it is valid.\r\n\r\nThe **canonical** form of an Eircode has letters uppercased and spaces and non-valid characters removed.\r\nFor example, `A65R2GF` is the canonical form of both `a65 r2gf` and `A-65-R2GF`. The `ParseResult` properties `routingKey`,\r\n`uniqueIdentifier` and `eircode` will always contain either the canonical form or an empty string (if invalid).\r\n\r\n## References\r\n\r\n[http://www.fretwell.ie/images/Eircode.pdf](http://www.fretwell.ie/images/Eircode.pdf)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}